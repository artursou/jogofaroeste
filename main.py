import random
import time

class StoryNode:
    """
    Representa um n√≥ na √°rvore da hist√≥ria. Cada n√≥ cont√©m o texto da hist√≥ria,
    as op√ß√µes para o jogador e os n√≥s filhos que correspondem a cada escolha.
    """
    def __init__(self, text, choices=None, action=None):
        self.text = text
        self.choices = choices if choices else {}
        # A a√ß√£o √© uma tupla: (descri√ß√£o_da_a√ß√£o, limite_de_sucesso, n√≥_de_sucesso, n√≥_de_falha)
        self.action = action
        self.is_ending = not (self.choices or self.action)

def roll_dice(threshold):
    """
    Simula uma rolagem de dados para determinar o sucesso de uma a√ß√£o.
    Gera um n√∫mero aleat√≥rio de 0 a 100.
    Retorna True se o n√∫mero for maior que o 'threshold', sen√£o False.
    """
    roll = random.randint(0, 100)
    print(f"\nüé≤ Voc√™ precisava de mais de {threshold} e rolou {roll}. üé≤")
    time.sleep(1)
    if roll > threshold:
        print("...Sucesso!")
        return True
    else:
        print("...Falha!")
        return False

# --- Finais da Hist√≥ria ---
end_game_hero = StoryNode(
    "üéâ VOC√ä VENCEU! üéâ\nCom a gangue derrotada e o dinheiro recuperado, voc√™ retorna para TomasBurgo como um her√≥i. O Prefeito Davi organiza uma festa em sua homenagem e sua lenda como o xerife que salvou a cidade √© contada por gera√ß√µes."
)

end_game_death_ambush = StoryNode(
    "GAME OVER\nA escurid√£o das cavernas foi a √∫ltima coisa que voc√™ viu. A gangue era numerosa e estava preparada. Sua jornada termina aqui."
)

end_game_death_lookout = StoryNode(
    "GAME OVER\nO vigia foi mais r√°pido no gatilho. Enquanto voc√™ ca√≠a, seu √∫ltimo pensamento foi sobre a cidade que n√£o conseguiu salvar. A poeira do desfiladeiro cobre seu corpo."
)

end_game_death_showdown = StoryNode(
    "GAME OVER\nApesar de sua bravura, a Gangue do Chap√©u Preto era implac√°vel. No tiroteio final, eles levaram a melhor. TomasBurgo perdeu seu xerife e sua esperan√ßa."
)

# --- Caminhos da Hist√≥ria ---

# N√ì: Confronto Final
final_showdown_surprise = StoryNode(
    text="Voc√™ invade o esconderijo pegando a gangue de surpresa! Eles se atrapalham para pegar as armas.",
    action=("Vencer o tiroteio final.", 40, end_game_hero, end_game_death_showdown)
)

final_showdown_assault = StoryNode(
    text="A gangue j√° esperava por voc√™! Tiros ecoam por todo o esconderijo assim que voc√™ entra.",
    action=("Sobreviver ao tiroteio e recuperar o dinheiro.", 65, end_game_hero, end_game_death_showdown)
)

# N√ì: Desfiladeiro
canyon_confront_lookout = StoryNode(
    text="Voc√™ encara o vigia. Ele cospe no ch√£o e leva a m√£o ao coldre. 'Voc√™ n√£o deveria estar aqui, xerife.'",
    action=("Ser mais r√°pido no duelo.", 50, final_showdown_assault, end_game_death_lookout)
)

canyon_sneak = StoryNode(
    text="Voc√™ tenta se mover pelas sombras, usando as rochas como cobertura para passar pelo vigia sem ser notado.",
    action=("Passar furtivamente pelo vigia.", 60, final_showdown_surprise, final_showdown_assault)
)

canyon_diversion = StoryNode(
    text="Voc√™ pega uma pedra e a joga para longe, criando um barulho que chama a aten√ß√£o do vigia. Ele se afasta para investigar.",
    action=("Distrair o vigia com sucesso.", 30, final_showdown_surprise, final_showdown_assault)
)

canyon_trail = StoryNode(
    text="A trilha te leva a um desfiladeiro estreito. √Ä frente, voc√™ avista um cavaleiro solit√°rio, provavelmente um vigia da gangue. O resto do bando deve estar logo √† frente.",
    choices={
        "1": ("Tentar passar furtivamente pelo vigia.", canyon_sneak),
        "2": ("Criar uma distra√ß√£o para atra√≠-lo para longe.", canyon_diversion),
        "3": ("Confrontar o vigia diretamente.", canyon_confront_lookout)
    }
)

# N√ì: Cavernas
whispering_caves = StoryNode(
    text="As Cavernas Sussurrantes s√£o escuras e √∫midas. Assim que voc√™ entra, ouve o som de rifles sendo engatilhados. 'Parece que o xerife caiu na nossa armadilha!', grita uma voz. √â uma emboscada!",
    action=("Sobreviver √† emboscada.", 70, canyon_trail, end_game_death_ambush)
)

# N√ì: Saloon (Investiga√ß√£o)
saloon_investigation = StoryNode(
    text="O saloon est√° cheio de rumores sobre o assalto. O barman, limpando um copo, menciona em voz baixa ter ouvido os bandidos falarem sobre um esconderijo nas 'Cavernas Sussurrantes'.",
    choices={
        "1": ("Acreditar no barman e ir para as Cavernas Sussurrantes.", whispering_caves),
        "2": ("Achar que √© uma pista falsa e investigar o desfiladeiro a leste.", canyon_trail)
    }
)

# N√ì: Banco
bank_investigation_success = StoryNode(
    text="O ferreiro reconhece a espora imediatamente! Pertence a 'Jack Caolho', um membro conhecido da Gangue do Chap√©u Preto. Ele diz que viu Jack cavalgando em dire√ß√£o ao desfiladeiro a leste.",
    choices={"1": ("Seguir a pista para o desfiladeiro.", canyon_trail)}
)

bank_investigation = StoryNode(
    text="No banco, o caos reina. O cofre foi arrombado e o cheiro de p√≥lvora ainda est√° no ar. Voc√™ encontra uma espora incomum ca√≠da perto do cofre, provavelmente de um dos bandidos.",
    action=("Tentar identificar o dono da espora na cidade.", 40, bank_investigation_success, saloon_investigation)
)

# N√ì: Persegui√ß√£o Imediata
immediate_pursuit_fail = StoryNode(
    text="O vento do deserto apagou a maioria das trilhas. Voc√™ perdeu o rastro dos bandidos. Sua melhor aposta agora √© voltar √† cidade e ver se consegue alguma informa√ß√£o no saloon.",
    choices={"1": ("Voltar ao saloon.", saloon_investigation)}
)

immediate_pursuit = StoryNode(
    text="Sem perder tempo, voc√™ monta em seu cavalo e cavalga para fora de TomasBurgo, examinando a plan√≠cie em busca de rastros.",
    action=("Encontrar o rastro da gangue.", 50, canyon_trail, immediate_pursuit_fail)
)

# --- Raiz da √Årvore / In√≠cio do Jogo ---
start_node = StoryNode(
    text="ü§† A Lenda do Xerife Kauan ü§†\nVoc√™ √© Kauan, o xerife da pequena e empoeirada cidade de TomasBurgo. A paz √© quebrada quando o prefeito Davi invade seu escrit√≥rio, p√°lido e ofegante. 'Xerife! A Gangue do Chap√©u Preto assaltou o banco! Eles levaram tudo! Voc√™ precisa recuperar nosso dinheiro!'",
    choices={
        "1": ("'Conte comigo, prefeito. Vou come√ßar investigando a cena do crime no banco.'", bank_investigation),
        "2": ("'Um trabalho desses requer ajuda. Vou ao saloon para ver o que descubro.'", saloon_investigation),
        "3": ("'N√£o h√° tempo a perder! Vou montar e seguir o rastro deles imediatamente.'", immediate_pursuit),
    }
)

# --- Loop Principal do Jogo ---
def play_game():
    """Fun√ß√£o principal que executa o jogo em um loop."""
    
    while True: # Loop para permitir que o jogador jogue novamente.
        current_node = start_node
        while not current_node.is_ending:
            print("\n--------------------------------------------------------------------------")
            print(current_node.text)
            print("--------------------------------------------------------------------------")
            time.sleep(1)

            if current_node.action:
                action_desc, threshold, success_node, failure_node = current_node.action
                print(f"Sua pr√≥xima a√ß√£o: {action_desc}")
                if roll_dice(threshold):
                    current_node = success_node
                else:
                    current_node = failure_node
            else:
                print("O que voc√™ faz?")
                for key, (desc, _) in current_node.choices.items():
                    print(f"[{key}] {desc}")
                
                choice = input("> ")
                if choice in current_node.choices:
                    _, next_node = current_node.choices[choice]
                    current_node = next_node
                else:
                    print("Escolha inv√°lida. Tente novamente.")
            
            time.sleep(1)

        # Imprime a mensagem final da hist√≥ria
        print("\n**********************************************************")
        print(current_node.text)
        print("**********************************************************")

        # Pergunta ao jogador se ele quer jogar novamente
        while True:
            play_again = input("\nDeseja jogar novamente? (s/n): ").lower().strip()
            if play_again in ["s", "sim", "n", "nao", "n√£o"]:
                break
            else:
                print("Resposta inv√°lida. Por favor, digite 's' para sim ou 'n' para n√£o.")
        
        if play_again in ["n", "nao", "n√£o"]:
            print("\nObrigado por jogar A Lenda do Xerife Kauan! At√© a pr√≥xima, parceiro.")
            break # Encerra o loop principal e finaliza o programa.

# Inicia o Jogo
play_game()